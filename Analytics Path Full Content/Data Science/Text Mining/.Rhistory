setwd('D:\\Data Science - Course\\Text and Naive Bayes')
setwd('D:\Data Science\Text Mining')
setwd('D:\\Data Science\\Text Mining')
library(plyr)
install.packages("twitteR")
library(dplyr)
library(dplyr)
library(stringr)
library(ggplot2)
library(tm) ### text mining
install.packages("tm")
library(tm) ### text mining
library(tm) ### text mining
library(NLP) ## Natural language processing
posText = read.delim(file='polarity_pos.txt', header=FALSE, stringsAsFactors=FALSE)
posText = read.delim(file='polarity_pos.txt', header=FALSE, stringsAsFactors=FALSE)
posText = read.delim(file='polarity_pos.txt', header=FALSE, stringsAsFactors=FALSE)
posText = posText$V1
head(posText)
class(posText)
posText = unlist(lapply(posText, function(x) { str_split(x, "\n") }))
posText[ 1:2]
score.sentiment <- function(sentences, pos.words, neg.words, .progress='none')
{
require(plyr)
require(stringr)
scores <- laply(sentences, function(sentence, pos.words, neg.words){
sentence <- gsub('[[:punct:]]', "", sentence)
sentence <- gsub('[[:cntrl:]]', "", sentence)
sentence <- gsub('\\d+', "", sentence)
sentence <- tolower(sentence)
word.list <- str_split(sentence, '\\s+')
words <- unlist(word.list)
pos.matches <- match(words, pos.words)
neg.matches <- match(words, neg.words)
pos.matches <- !is.na(pos.matches)
neg.matches <- !is.na(neg.matches)
score <- sum(pos.matches)  - sum(neg.matches)
return(score)
}, pos.words, neg.words, .progress=.progress)
scores.df <- data.frame(score=scores, text=sentences)
return(scores.df)
}
afinn_list = read.delim(file='AFINN-111.txt', header=FALSE, stringsAsFactors=FALSE)
afinn_list = read.delim(file='AFINN-111.txt', header=FALSE, stringsAsFactors=FALSE)
head(afinn_list)
names(afinn_list) = c('word', 'score')
rm(list=ls())
setwd("D:\\Data Science\\Text Mining")
sms_raw = read.csv("sms_spam.csv", stringsAsFactors = FALSE)
str(sms_raw)
head(sms_raw)
sms_raw$type <- factor(sms_raw$type)
sms_raw$type
prop.table(table(sms_raw$type))
str(sms_raw$type)
prop.table(table(sms_raw$type))
head(sms_raw)
library(tm)
library(NLP)
sms_corpus <- Corpus(VectorSource(sms_raw$text))
print(sms_corpus)
?removeNumbers
?tolower
corpus_clean <- tm_map(sms_corpus, tolower)
corpus_clean =  tm_map(corpus_clean, PlainTextDocument)
corpus_clean <- tm_map(corpus_clean, removeNumbers)
corpus_clean <- tm_map(corpus_clean, removeWords, stopwords("english"))
corpus_clean <- tm_map(corpus_clean, removePunctuation)
corpus_clean <- tm_map(corpus_clean, stripWhitespace)
inspect(sms_corpus[1:3])
class(corpus_clean)
sms_dtm <- DocumentTermMatrix(corpus_clean)
sms_dtm <- DocumentTermMatrix(corpus_clean)
?DocumentTermMatrix()
sms_dtm <- DocumentTermMatrix(corpus_clean,control = '')
sms_dtm <- DocumentTermMatrix(corpus_clean)
sms_dtm <- DocumentTermMatrix(corpus_clean)
install.packages("SnowballC")
library(SnowballC)
sms_dtm <- DocumentTermMatrix(corpus_clean)
library(SnowballC)
sms_dtm <- DocumentTermMatrix(corpus_clean)
sms_dtm <- DocumentTermMatrix(corpus_clean,
control = list(removePunctuation = TRUE,
stopwords =  TRUE,
removeNumbers = TRUE,
tolower = TRUE))
sms_raw$text=iconv(sms_raw$text,"UTF-8", "ASCII", sub = "")
library(tm)
library(NLP)
sms_corpus <- Corpus(VectorSource(sms_raw$text))
print(sms_corpus)
?removeNumbers
?tolower
corpus_clean <- tm_map(sms_corpus, tolower)
corpus_clean =  tm_map(corpus_clean, PlainTextDocument)
corpus_clean <- tm_map(corpus_clean, removeNumbers)
corpus_clean <- tm_map(corpus_clean, removeWords, stopwords("english"))
corpus_clean <- tm_map(corpus_clean, removePunctuation)
corpus_clean <- tm_map(corpus_clean, stripWhitespace)
inspect(sms_corpus[1:3])
class(corpus_clean)
library(SnowballC)
sms_dtm <- DocumentTermMatrix(corpus_clean)
corpus_clean=iconv(corpus_clean, "UTF-8", "ASCII", sub = "")
sms_dtm <- DocumentTermMatrix(corpus_clean)
class(corpus_clean)
inspect(sms_corpus[1:3])
class(corpus_clean)
library(SnowballC)
corpus_clean=iconv(corpus_clean, "UTF-8", sub = "")
sms_dtm <- DocumentTermMatrix(corpus_clean)
?DocumentTermMatrix()
sms_raw_train <- sms_raw[1:4169, ]
sms_raw_test  <- sms_raw[4170:5559, ]
sms_dtm_train <- sms_dtm[1:4169, ]
sms_dtm_test  <- sms_dtm[4170:5559, ]
