data1 = read.csv('D:\\Data science  notes\\dataMerged.csv')
str(data1)
View(data1)
data1 = na.omit(data1)
colsToFactors = c('loan','online','securities','edu','family','cc','cd')
for(i in colsToFactors){
data1[,i] = as.factor(data1[,i])
}
rows = 1:nrow(data1)
rows
train_rows = sample(rows,round(0.8*nrow(data1)))
test_rows = rows[-train_rows]
train_data = data1[train_rows,]
test_data = data1[test_rows,]
str(train_data)
library(rpart)
dtree1 = rpart(loan ~.,data=train_data,control = c(cp=0.01,maxdepth=3))#control = c(cp=0.01)
dtree1
plot(dtree1,main="Classification Tree for loan Class",
margin=0.1,uniform=TRUE)
text(dtree1,use.n=T)
library(rpart.plot)
library(rpart.plot)
rpart.plot(dtree1)
rpart.plot(dtree1)
preds = predict(dtree1,test_data)
preds = as.data.frame(preds)
View(preds)
preds$preds_Class = ifelse(preds$`1` > 0.5,1,0)
table(test_data$loan,preds$preds_Class,dnn=c('actuals','preds'))
(566+49)/(566+59)
49/50
49/58
preds_train = predict(dtree1,train_data)
preds_train = as.data.frame(preds_train)
preds_train$preds_Class = ifelse(preds_train$`1` > 0.5,1,0)
table(train_data$loan,preds_train$preds_Class,dnn=c('actuals','preds'))
(2244+199)/(2244+199+12+47)
199/211
library(C50)
dtree2 = C5.0(loan ~.,data=train_data)
plot(dtree2)
plot(dtree2)
preds = predict(dtree2, test_data)
table(test_data$loan,preds,dnn=c('actuals','preds'))
(565+49)/(565+49+11)
49/51
49/58
49/50
library(caret)
library(caret)
train_control<- trainControl(method="cv", number=10)
model<- train(loan ~.,data=train_data, trControl=train_control, method="C5.0")
model<- train(loan ~.,data=train_data, trControl=train_control, method="C5.0")
installed.packages("e1071")
installed.packages("e1071")
install.packages("e1071")
model<- train(loan ~.,data=train_data, trControl=train_control, method="C5.0")
preds = predict(model,test_data)
table(preds,test_data$loan)
table(preds,test_data$loan)
library(xgboost)
library(xgboost)
616/625
setwd("D:/AP/baging and  RF")
library(ISLR)
data("Default")
library(rpart)
head(Default)
View(Default)
default_tree = rpart(default ~ . , data = Default )
plot(default_tree)
plot(default_tree)
text(default_tree)
library(rpart)				        # Popular decision tree algorithm
library(caret)
library(randomForest)
library(randomForest)
library(mlbench)
library(mlbench)
control = trainControl(method="repeatedcv", number=5, search = "grid")
set.seed(1238)
tunegrid = expand.grid(.mtry=c(4:9))
rf_gridsearch = train(Churn~., data=train, method="rf", metric="Accuracy", tuneGrid=tunegrid, trControl=control)
rf_gridsearch = train(Churn~., data=train, method="rf", metric="Accuracy", tuneGrid=tunegrid, trControl=control)
head(Default)
dim(iris)
s<-sample(150,100)
iris_train<-iris[s,]
iris_test<-iris[-s,]
dim(iris_train)
dim(iris_test)
library(rpart)
names(iris)
dtree<-rpart(Species~.,iris_train,method = "class")
plot(dtree)
text(dtree)
dtree
library(rpart.plot)
rpart.plot(dtree)
rpart.plot(dtree)
y_pred<-predict(dtree,iris_test,type = "class")
y_ored
y_pred
table(iris_test[,5],y_pred)
data()
data1 = read.csv('D:\\Data science  notes\\dataMerged.csv')
data1 = read.csv('D:\\Data Science\\Machine Learning\\dataMerged.csv')
str(data1)
data1 = na.omit(data1)
colsToFactors = c('loan','online','securities','edu','family','cc','cd')
for(i in colsToFactors){
data1[,i] = as.factor(data1[,i])
}
str(data1)
rows = 1:nrow(data1)
rows
train_rows = sample(rows,round(0.8*nrow(data1)))
test_rows = rows[-train_rows]
train_data = data1[train_rows,]
test_data = data1[test_rows,]
str(train_data)
library(rpart)
dtree1 = rpart(loan ~.,data=train_data,control = c(cp=0.01,maxdepth=3))#control = c(cp=0.01)
dtree1
plot(dtree1,main="Classification Tree for loan Class",
margin=0.1,uniform=TRUE)
text(dtree1,use.n=T)
library(rpart.plot)
rpart.plot(dtree1)
rpart.plot(dtree1)
View(dtree1)
View(train_data)
preds = predict(dtree1,test_data)
preds = as.data.frame(preds)
preds$preds_Class = ifelse(preds$`1` > 0.5,1,0)
table(test_data$loan,preds$preds_Class,dnn=c('actuals','preds'))
preds_train = predict(dtree1,train_data)
preds_train = as.data.frame(preds_train)
preds_train$preds_Class = ifelse(preds_train$`1` > 0.5,1,0)
table(train_data$loan,preds_train$preds_Class,dnn=c('actuals','preds'))
