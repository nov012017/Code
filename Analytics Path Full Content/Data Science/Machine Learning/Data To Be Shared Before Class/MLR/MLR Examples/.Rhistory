data1 = read.csv("D:\\Data science  notes\\universalBank.csv")
View(data1)
names(data1)
data1$ZIP.Code  = NULL
data1$ID = NULL
str(data1)
data1$Family = as.factor(data1$Family)
data1$Education = as.factor(data1$Education)
data1$Family
len(summary(data1))
summary(data1)
length(data1$Experience[data1$Experience <0])
data1$Experience[data1$Experience <0] = 0
names(data1)
View(cor(data1[,-c(4,6)]))
data1$Experience = NULL # High cor with Age
library(dummies)
library(dummies)
data1_dummies = dummy.data.frame(data1)
names(data1_dummies)
data1_dummies = data1_dummies[,-c(6,10)]
names(data1_dummies)
fnScaling = function(x){
return((x-min(x))/(max(x)-min(x)))
}
for(i in 1:ncol(data1_dummies)){
data1_dummies[,i] = fnScaling(data1_dummies[,i])
}
num=1:10
for(i in 1:ncol(data1_dummies)){
data1_dummies[,i] = fnScaling(data1_dummies[,i])
}
summary(data1_dummies)
betweenByTotal = c()
for(i in 2:15){
clust = kmeans(x=data1_dummies,centers = i)
betweenByTotal = c(betweenByTotal,clust$betweenss/clust$totss)
}
plot(2:15,betweenByTotal,type = 'l')
clust =  kmeans(x=data1_dummies,centers = 12)
clust =  kmeans(x=data1_dummies,centers = 12)
clust =  kmeans(x=data1_dummies,centers = 12)
summary(clust)
plot(2:10,betweenByTotal,type = 'l')
data1 = read.csv("C:/Users/phsivale/Documents/Trainings/Churn Data.csv")
data1 = read.csv("D:\\Data science  notes\\Churn Data.csv")
data1$churn = NULL
data1$phone.number = NULL
str(data1)
data1$churn = NULL
data1$phone.number = NULL
data1$area.code = as.factor(data1$area.code)
data1$state = NULL
summary(data1)
summary(data1)
View(data.frame(table(data1$state)))
data1 = read.csv("D:\\Data science  notes\\Churn Data.csv")
str(data1)
data1$churn = NULL
data1$phone.number = NULL
data1$area.code = as.factor(data1$area.code)
summary(data1)
View(data.frame(table(data1$state)))
data1$state = NULL
library(dummies)
data1_dummies = dummy.data.frame(data1)
names(data1_dummies)
data1_dummies = data1_dummies[,-c(2,5,7)]
names(data1_dummies)
data1_dummies[,c(7:8)]
View(cor(data1_dummies[,c(7:18)]))
names(data1_dummies)
View(cor(data1_dummies[,c(7:18)]))
data1_dummies = data1_dummies[,-c(7,10,13,16)]
fnScaling = function(x){
return((x-min(x))/(max(x)-min(x)))
}
for(i in 1:ncol(data1_dummies)){
data1_dummies[,i] = fnScaling(data1_dummies[,i])
}
clust = kmeans(x=data1_dummies,centers = 6)
names(clust)
for(i in 2:10){
clust = kmeans(x=data1_dummies,centers = i)
betweenByTotal = c(betweenByTotal,clust$betweenss/clust$totss)
}
betweenByTotal = c()
for(i in 2:10){
clust = kmeans(x=data1_dummies,centers = i)
betweenByTotal = c(betweenByTotal,clust$betweenss/clust$totss)
}
kmeans(x=data1_dummies,centers = 5)
plot(2:10,betweenByTotal,type = 'l')
kmeans(x=data1_dummies,centers = 5)
kmeans(x=data1_dummies,centers = 5)
plot(2:10,betweenByTotal,type = 'l')
plot(2:10,betweenByTotal,type = 'l')
setwd("D:\\Data science  notes")
setwd("D:\\Data science  notes")
getwd()
Online.Retail=read.csv("OnlineRetail.csv",stringsAsFactors = FALSE)##factor uses less memory
str(Online.Retail)
sum(is.na(Online.Retail))
sum(is.na(Online.Retail$CustomerID))
order_wise<-na.omit(Online.Retail)
Amount<-order_wise$Quantity*order_wise$UnitPrice
order_wise<-cbind(order_wise,Amount)
View(order_wise)
order_wise<-order_wise[order(order_wise$CustomerID),]
monetary<-aggregate(Amount~CustomerID,order_wise,sum)
names(order_wise)
frequency<-order_wise[,c(7,1)]
View(frequency)
k<-table(as.factor(frequency$CustomerID))
k<-data.frame(k)
View(k)
colnames(k)[1]<-c("CustomerID")
master<-merge(monetary,k,by="CustomerID")
head(master)
recency<-order_wise[,c(7,5)]
View(recency)
recency$InvoiceDate<-as.Date(recency$InvoiceDate,"%m/%d/%Y %H:%M")
View(recency$InvoiceDate)
maximum<-max(recency$InvoiceDate)
maximum<-maximum+1
maximum$diff<-maximum-recency$InvoiceDate
recency$diff<-maximum$diff
df<-aggregate(recency$diff,
by=list(recency$CustomerID),
FUN="min")
colnames(df)[1]<-"CustomerID"
colnames(df)[2]<-"Recency"
RFM<-merge(monetary,k,by=("CustomerID"))
RFM<-merge(RFM,df,by=("CustomerID"))
str(RFM)
RFM$Recency<-as.numeric(RFM$Recency)
box<-boxplot.stats(RFM$Amount)
box<-boxplot.stats(RFM$Amount)
out<-box$out
RFM1<-RFM[!RFM$Amount %in% out,]
RFM<-RFM1
box<-boxplot.stats(RFM$Freq)
data("mtcars")
mtcars
distmat = dist(as.matrix(mtcars))
hierclust = hclust(distmat)
plot(hierclust)
clusterCut <- cutree(hierclust, 5)
plot(clusterCut)
clusterCut <- cutree(hierclust, 5)
plot(clusterCut)
mtcars$cluster = clusterCut
mtcars$cluster = clusterCut
aggregate(mtcars,list(mtcars$cluster),mean)
data("USArrests")
USArrests
hc <- hclust(dist(USArrests))
plot(hc)
plot(hc)
clusterCut = cutree(hc,k=3)
plot(hc)
setwd("D:\\Data science  notes\\Data To Be Shared Before Class\\MLR\\MLR Examples")
dataset=read.csv("iqsize.csv")
View(dataset)
names(dataset)
library(ggplot2)
ggplot(dataset,aes(Brain,PIQ))+geom_point(color='blue')
ggplot(dataset,aes(Weight,PIQ))+geom_point(color='blue')
ggplot(dataset,aes(Height,PIQ))+geom_point(color='blue')
library(GGally)
ggpairs(dataset)
ggpairs(dataset)
regressor=lm(PIQ~.,dataset)
summary(regressor)
anova(regressor)
y_pred=predict(regressor,newdata = dataset)
library(MASS)
std_resid=stdres(regressor)
plot(y_pred,std_resid)
plot(y_pred,std_resid)
library(car)
library(car)
qqplot(std_resid)
install.packages("car")
library(car)
install.packages("car",dependencies=TRUE)
library(car)
update.packages(checkBuilt = TRUE)
library(car)
install.packages("nloptr")
install.packages("car",dependencies=TRUE)
library(car)
library(car)
library(car)
qqplot(std_resid)
std_resid=stdres(regressor)
plot(y_pred,std_resid)
library(car)
qqplot(std_resid)
qqplot(std_resid,)
qqplot(std_resid)
qqplot(std_resid)
setwd("D:\\Data science  notes\\Data To Be Shared Before Class\\MLR\\MLR Examples")
dataset=read.csv("iqsize.csv")
names(dataset)
library(ggplot2)
ggplot(dataset,aes(Brain,PIQ))+geom_point(color='blue')
ggplot(dataset,aes(Weight,PIQ))+geom_point(color='blue')
ggplot(dataset,aes(Height,PIQ))+geom_point(color='blue')
library(GGally)
library(GGally)
ggpairs(dataset)
ggpairs(dataset)
regressor=lm(PIQ~.,dataset)
regressor=lm(PIQ~.,dataset)
summary(regressor)
anova(regressor)
y_pred=predict(regressor,newdata = dataset)
library(MASS)
std_resid=stdres(regressor)
plot(y_pred,std_resid)
plot(y_pred,std_resid)
library(car)
library(car)
qqplot(std_resid)
qqplot(std_resid)
qqplot(std_resid,plot.it = TRUE)
qqplot(std_resid)
qqPlot(std_resid)
qqPlot(std_resid)
2697.1+2875.6+13321.8
13321.8/18894.5
1-(13321.8/18894.5)
