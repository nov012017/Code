ggplot(dataset,aes(horsepower,mpg,color='cylinders'))+
geom_point()+
geom_smooth(method = 'lm',color='red',se=FALSE)
ggplot(dataset,aes(horsepower,mpg,color='cylinders'))+
geom_point()+
geom_smooth(method = 'lm',color='red',se=FALSE)
ggplot(dataset,aes(x=horsepower,y=mpg,color='cylinders'))+
geom_point()+
geom_smooth(method = 'lm',color='red',se=FALSE)
ggplot(dataset,aes(x=horsepower,y=mpg,color='cylinders'))+
geom_point()+
geom_smooth(method = 'lm',color='red',se=FALSE)
ggplot(dataset,aes(x=horsepower,y=mpg,color=cylinders))+
geom_point()+
geom_smooth(method = 'lm',color='red',se=FALSE)
ggplot(dataset,aes(x=horsepower,y=mpg,color=cylinders))+
geom_point()+
geom_smooth(method = 'lm',color='red',se=FALSE)
ggplot(dataset,aes(displacement,mpg))+
geom_point(color='blue')+
geom_smooth(method = 'lm',color='red',se=FALSE)
ggplot(dataset,aes(displacement,mpg))+
geom_point(color='blue')+
geom_smooth(method = 'lm',color='red',se=FALSE)
ggplot(dataset,aes(acceleration,mpg))+
geom_point(color='blue')+
geom_smooth(method = 'lm',color='red',se=FALSE)
ggplot(dataset,aes(acceleration,mpg))+
geom_point(color='blue')+
geom_smooth(method = 'lm',color='red',se=FALSE)
ggplot(dataset,aes(model.year,mpg))+
geom_boxplot(color='blue')
ggplot(dataset,aes(model.year,mpg))+
geom_boxplot(color='blue')
ggplot(dataset,aes(origin,mpg))+
geom_point(color='blue')
ggplot(dataset,aes(origin,mpg))+
geom_point(color='blue')
ggplot(dataset,aes(origin,mpg))+
geom_boxplot(color='blue')
ggplot(dataset,aes(origin,mpg))+
geom_boxplot(color='blue')
str(dataset)
names(dataset)
sub_dataset= dataset[,c('mpg','displacement','horsepower','weight','acceleration')]
sub_dataset= dataset[,c('mpg','displacement','horsepower','weight','acceleration')]
library(GGally)
ggpairs(sub_dataset)
ggpairs(sub_dataset)
library(car)
corrmat=cor(sub_dataset)
library(corrplot)
corrmat=cor(sub_dataset)
corrplot.mixed(corrmat)
corrplot.mixed(corrmat)
sum(is.na(dataset$mpg))
sapply(dataset,function(x) sum(is.na(x)))
library(caTools)
set.seed(567)
split=sample.split(dataset$mpg,SplitRatio = 0.7)
train_data=subset(dataset,split==TRUE)
test_data=subset(dataset,split==FALSE)
View(train_data)
View(test_data)
train_data$car.name<-NULL
test_data$car.name<-NULL
regressor1=lm(mpg~.,train_data)
y_pred=predict(regressor1,newdata = test_data)
y_pred
residuals=resid(lm(mpg~.,data = test_data))
ggplot(test_data,aes(x=y_pred,y=residuals))+geom_point()
ggplot(test_data,aes(x=y_pred,y=residuals))+geom_point()
library(MASS)
standres=stdres(residuals)
library(MASS)
standres=stdres(lm(mpg~.,data = test_data)
##Residuals vs fits plot
ggplot(test_data,aes(x=y_pred,y=residuals))+geom_point()
standres=stdres(lm(mpg~.,data = test_data))
ggplot(test_data,aes(x=y_pred,y=standres))+geom_point()
hist(dataset$mpg)
skewness(dataset$mpg)
kurtosis(dataset$mpg)
dataset$mpg=log(dataset$mpg)
hist(dataset$mpg)
skewness(dataset$mpg)
kurtosis(dataset$mpg)
hist(dataset$mpg)
ggplot(dataset,aes(x=cylinders,y=mpg,color='cylinders'))+geom_boxplot()
library(caTools)
set.seed(567)
split=sample.split(dataset$mpg,SplitRatio = 0.7)
train_data=subset(dataset,split==TRUE)
test_data=subset(dataset,split==FALSE)
#View(train_data)
train_data$car.name<-NULL
test_data$car.name<-NULL
regressor2=lm(mpg~.,train_data)
summary(regressor2)
regressor2=lm(mpg~.,train_data)
y_pred2=predict(regressor2,newdata = test_data)
y_pred_train=predict(regressor2,newdata = train_data)
standres2=stdres(regressor2)
standres2=stdres(regressor2)
ggplot(aes(x=y_pred_train,y=standres2),data=train_data)+
geom_point()
ggplot(aes(x=y_pred2,y=standres(lm(mpg~.,test_data)),data=test_data)+
geom_point()
ggplot(aes(x=y_pred2,y=standres(lm(mpg~.,test_data)),data=test_data)+
geom_point()
ggplot(aes(x=y_pred2,y=stdres(lm(mpg~.,test_data)),data=test_data)+
geom_point()
ggplot(aes(x=y_pred2,y=stdres(lm(mpg~.,test_data)),data=test_data)+
geom_point()
ggplot(aes(x=y_pred2,y=stdres(lm(mpg~.,data=test_data)))+
geom_point()
library(car)
durbinWatsonTest(regressor2)
hist(resid(regressor2))
hist(resid(regressor2))
skewness(resid(regressor2))
kurtosis(resid(regressor2))
qqPlot(regressor2)
qqPlot(regressor2)
standres2=stdres(regressor2)
ggplot(aes(x=y_pred_train,y=standres2),data=train_data)+
geom_point()
ggplot(aes(x=y_pred_train,y=standres2),data=train_data)+
geom_point()
library(car)
vif(regressor2)
dataset$displacement<-NULL
library(caTools)
set.seed(567)
split=sample.split(dataset$mpg,SplitRatio = 0.7)
train_data=subset(dataset,split==TRUE)
regressor3=lm(mpg~.,data = train_data)
vif(regressor3)
vif(regressor3)
dataset$displacement<-NULL
dataset$car.name<-NULL
library(caTools)
set.seed(567)
split=sample.split(dataset$mpg,SplitRatio = 0.7)
train_data=subset(dataset,split==TRUE)
test_data=subset(dataset,split==FALSE)
regressor3=lm(mpg~.,data = train_data)
vif(regressor3)
plot(regressor3)
train_data$leverages=cooks.distance(regressor3)
max(train_data$leverages)
summary(regressor3)
anova(regressor3)
plot(regressor3)
plot(regressor3)
setwd("D:\\Data science  notes")
setwd("D:\\Data science  notes")
dataset=read.csv("carmpg.csv")
names(dataset)
library(e1071)
library(ggplot2)
ggplot(dataset,aes(acceleration,mpg))+
geom_point(color='blue')+
geom_smooth(method = 'lm',color='red',se=FALSE)
regressor1=lm(mpg~.,train_data)
y_pred=predict(regressor1,newdata = test_data)
library(caTools)
set.seed(567)
split=sample.split(dataset$mpg,SplitRatio = 0.7)
train_data=subset(dataset,split==TRUE)
test_data=subset(dataset,split==FALSE)
#View(train_data)
#View(test_data)
train_data$car.name<-NULL
test_data$car.name<-NULL
######################################################
#First version of the model on training data
#####################################################
regressor1=lm(mpg~.,train_data)
y_pred=predict(regressor1,newdata = test_data)
#y_pred
##Testing the assumptions
#Assumption1-Linearity(residuals vs test_data)
residuals=resid(lm(mpg~.,data = test_data))
library(MASS)
standres=stdres(lm(mpg~.,data = test_data))
ggplot(test_data,aes(x=y_pred,y=standres))+geom_point()
ggplot(test_data,aes(x=y_pred,y=standres))+geom_point()
ggplot(test_data,aes(x=y_pred,y=standres))+geom_point()
standres=stdres(lm(mpg~.,data = test_data))
residuals=resid(lm(mpg~.,data = test_data))
library(MASS)
standres=stdres(lm(mpg~.,data = test_data))
library(caTools)
set.seed(567)
split=sample.split(dataset$mpg,SplitRatio = 0.7)
train_data=subset(dataset,split==TRUE)
test_data=subset(dataset,split==FALSE)
train_data$car.name<-NULL
test_data$car.name<-NULL
regressor1=lm(mpg~.,train_data)
y_pred=predict(regressor1,newdata = test_data)
residuals=resid(lm(mpg~.,data = test_data))
library(MASS)
standres=stdres(lm(mpg~.,data = test_data))
ggplot(test_data,aes(x=y_pred,y=standres))+geom_point()
ggplot(test_data,aes(x=y_pred,y=standres))+geom_point()
setwd("D:\\Data science  notes")
dataset=read.csv("carmpg.csv")
View(dataset)
names(dataset)
summary(dataset)
str(dataset)
dataset$cylinders=factor(dataset$cylinders)
dataset$horsepower=as.numeric(dataset$horsepower)
dataset$model.year=factor(dataset$model.year)
dataset$origin=factor(dataset$origin)
dataset$car.name=as.character(dataset$car.name)
str(dataset)
hist(dataset$mpg)
summary(dataset$mpg)
library(e1071)
skewness(dataset$mpg)## +ve indicates---right skewness
kurtosis(dataset$mpg)## _ve indicates---the peak of the distribution is less than the normal distr.
library(ggplot2)
ggplot(dataset,aes(x=cylinders,y=mpg,color='cylinders'))+geom_boxplot()
ggplot(dataset,aes(displacement,mpg))+
geom_point(color='blue')+
geom_smooth(method = 'lm',color='red',se=FALSE)
ggplot(dataset,aes(x=horsepower,y=mpg,color=cylinders))+
geom_point()+
geom_smooth(method = 'lm',color='red',se=FALSE)
ggplot(dataset,aes(displacement,mpg))+
geom_point(color='blue')+
geom_smooth(method = 'lm',color='red',se=FALSE)
ggplot(dataset,aes(acceleration,mpg))+
geom_point(color='blue')+
geom_smooth(method = 'lm',color='red',se=FALSE)
ggplot(dataset,aes(model.year,mpg))+
geom_boxplot(color='blue')
ggplot(dataset,aes(origin,mpg))+
geom_boxplot(color='blue')
str(dataset)
names(dataset)
sub_dataset= dataset[,c('mpg','displacement','horsepower','weight','acceleration')]
library(GGally)
ggpairs(sub_dataset)
library(corrplot)
corrmat=cor(sub_dataset)
corrplot.mixed(corrmat)
sum(is.na(dataset$mpg))
sapply(dataset,function(x) sum(is.na(x)))
library(caTools)
set.seed(567)
split=sample.split(dataset$mpg,SplitRatio = 0.7)
train_data=subset(dataset,split==TRUE)
test_data=subset(dataset,split==FALSE)
train_data$car.name<-NULL
test_data$car.name<-NULL
regressor1=lm(mpg~.,train_data)
y_pred=predict(regressor1,newdata = test_data)
residuals=resid(lm(mpg~.,data = test_data))
library(MASS)
standres=stdres(lm(mpg~.,data = test_data))
ggplot(test_data,aes(x=y_pred,y=standres))+geom_point()
ggplot(test_data,aes(x=y_pred,y=standres))+geom_point()+
geom_smooth(method = 'lm',se=FALSE)
ggplot(test_data,aes(x=y_pred,y=standres))+geom_point()+
geom_smooth(method = 'lm',se=FALSE)
library(e1071)
library(e1071)
setwd("D:\\Data science\\R exercise data")
setwd("D:\\Data Science\\Machine Learning\\R exercise data")
getwd()
kings = scan("http://robjhyndman.com/tsdldata/misc/kings.dat",skip=3)
births = scan("http://robjhyndman.com/tsdldata/data/nybirths.dat")
souvenir = scan("http://robjhyndman.com/tsdldata/data/fancy.dat")
rain = scan("http://robjhyndman.com/tsdldata/hurst/precip1.dat",skip=1)
skirts = scan("http://robjhyndman.com/tsdldata/roberts/skirts.dat",skip=5)
kings
head(kings)
kingstimeseries = ts(kings)
kingstimeseries
plot.ts(kingstimeseries)
births
head(births)
birthstimeseries = ts(births, frequency=12, start=c(1946,1))
birthstimeseries
plot.ts(birthstimeseries)
plot.ts(birthstimeseries)
birthdecomp = decompose(birthstimeseries)
birthdecomp = decompose(birthstimeseries)
plot(birthdecomp)
plot(birthdecomp)
souvenir
souvenirtimeseries = ts(souvenir, frequency=12, start=c(1987,1))
souvenirtimeseries
plot.ts(souvenirtimeseries)
plot.ts(souvenirtimeseries)
logsovseries = log(souvenirtimeseries)
plot.ts(logsovseries)
plot.ts(logsovseries)
logsouvenirtimeseries = log(souvenirtimeseries)
plot.ts(logsouvenirtimeseries)
plot.ts(logsouvenirtimeseries)
plot.ts(kingstimeseries)
plot.ts(kingstimeseries)
library("TTR")
library("forecast")
install.packages("forecast")
library("forecast")
library("forecast")
kingstimeseriesSMA3 = SMA(kingstimeseries,n=3)
kingstimeseriesSMA3
plot.ts(kingstimeseriesSMA3)
plot.ts(kingstimeseriesSMA3)
plot.ts(kingstimeseries)
kingstimeseries
kingstimeseriesSMA5 = SMA(kingstimeseries,n=5)
plot.ts(kingstimeseriesSMA5)
kingstimeseriesSMA10 = SMA(kingstimeseries,n=10)
plot.ts(kingstimeseriesSMA10)
plot.ts(kingstimeseriesSMA10)
kingstimeseries
kingstimeseriesSMA3
kingstimeseriesSMA3  = SMA(kingstimeseries,n=3)
plot.ts(kingstimeseriesSMA3)
kingsholtwinters = HoltWinters(kingstimeseries, gamma=F)
plot.ts(kingsholtwinters)
plot.ts(kingsholtwinters)
plot.ts(kingsholtwinters)
kingsholtwinters
plot.ts(birthstimeseries)
birthhw = HoltWinters(birthstimeseries, gamma = F)
birthhw = HoltWinters(birthstimeseries, gamma = F)
plot(birthhw)
plot(birthhw)
plot.ts(birthstimeseries)
plot.ts(birthstimeseries)
birthstimeseriescomponents = decompose(birthstimeseries)
birthstimeseriescomponents = decompose(birthstimeseries)
birthdecom = decompose(birthstimeseries)
plot(birthdecom)
plot(birthdecom)
plot(birthstimeseriescomponents)
plot(birthstimeseriescomponents)
birthstimeseriescomponents
birthstimeseriescomponents$seasonal
birthstimeseriescomponents$trend
setwd("D:\\Data Science")
birthstimeseriescomponents = decompose(birthstimeseries)
birthstimeseriesseasonallyadjusted = birthstimeseries - birthstimeseriescomponents$seasonal
plot(birthstimeseriesseasonallyadjusted) ## seasionality adjusted
plot(birthstimeseriesseasonallyadjusted) ## seasionality adjusted
birthhw = HoltWinters(birthstimeseries, gamma = F)
plot(birthhw)
plot(birthhw)
birthhw_sea = HoltWinters(birthstimeseries)
plot(birthhw_sea)
plot(birthhw_sea)
birthsforecast = forecast.HoltWinters(birthhw_sea, h = 12)
birthsforecast
birthsforecast = forecast.HoltWinters(birthhw_sea, h = 12)
install.packages("forecast")
install.packages("forecast")
install.packages("forecast")
birthsforecast = forecast.HoltWinters(birthhw_sea, h = 12)
library("forecast", lib.loc="~/R/win-library/3.4")
birthsforecast = forecast.HoltWinters(birthhw_sea, h = 12)
birthsforecast = forecast::HoltWinters(birthhw_sea, h = 12)
birthsforecast = forecast:HoltWinters(birthhw_sea, h = 12)
birthsforecast = ets(birthhw_sea, h = 12)
birthsforecast = forecast(birthhw_sea, h = 12)
birthsforecast
plot.forecast(birthsforecast)
plot(bithsforecast)
plot(birthsforecast)
plot(birthsforecast)
birthsforecast=forecast.ets(birthhw_sea, h = 12)
plot.forecast(birthsforecast)
birthhw_sea = HoltWinters(birthstimeseries)
plot(birthhw_sea)
plot(birthhw_sea)
birthsforecast1 = forecast(birthhw_sea, h = 12)
plot(birthsforecast1)
plot(birthsforecast1)
birthsforecast2=forecast.ets(birthhw_sea, h = 12)
birthsforecast2=forecast.ets(birthhw_sea, h = 12)
birthsforecast2=forecast.ets(birthhw_sea, h = 12)
birthsforecast2=ets(birthhw_sea, h = 12)
birthsforecast2=ets(birthhw_sea, h = 12)
birthsforecast1 = forecast(birthsforecast2, h = 12)
birthsforecast2 = forecast(birthsforecast2, h = 12)
birthsforecast1 = forecast::holt(birthstimeseries, h = 12)
birthsforecast3 = forecast::holt(birthstimeseries, h = 12)
birthsforecast3
plot.forecast(birthsforecast3)
plot(birthsforecast3)
plot(birthsforecast3)
birthsforecast4=HoltWinters(birthstimeseries)
plot.forecat(birthsforecast4)
plot.forecat(birthsforecast4)
plot(birthsforecast4)
birthsforecast4=HoltWinters(birthstimeseries)
birthsforecast4
plot(birthsforecast4)
birthsforecast4 = forecast(birthsforecast4, h = 12)
birthsforecast4
plot(birthsforecast4)
plot(birthsforecast4)
plot.ts(souvenirtimeseries)
plot.ts(souvenirtimeseries)
sov_hw = HoltWinters(souvenirtimeseries, seasonal = "multiplicative")
sov_hw = HoltWinters(souvenirtimeseries, seasonal = "multiplicative")
plot(sov_hw)
plot(sov_hw)
plot(sov_hw)
sov_forec = forecast.HoltWinters(sov_hw, h = 12)
sov_forec = forecast(sov_hw, h = 12)
plot(sov_forec)
sov_add = HoltWinters(souvenirtimeseries) ## default is additive
plot(sov_add)
plot(sov_add)
sov_add_forec = forecast.HoltWinters(sov_add, h = 12)
sov_add_forec = forecast:HoltWinters(sov_add, h = 12)
sov_add_forec = forecast::HoltWinters(sov_add, h = 12)
sov_add_forec = forecast.(sov_add, h = 12)
sov_add_forec = forecast(sov_add, h = 12)
plot(sov_add_forec)
sov_add_forec = forecast(sov_add, h = 12)
plot(sov_add_forec)
plot(sov_add_forec)
sov_add_forec = forecast(sov_add, h = 12)
plot(sov_add_forec)
plot(sov_add_forec)
birthhw_sea = HoltWinters(birthstimeseries)
plot(birthhw_sea)
kings = scan("http://robjhyndman.com/tsdldata/misc/kings.dat",skip=3)
births = scan("http://robjhyndman.com/tsdldata/data/nybirths.dat")
souvenir = scan("http://robjhyndman.com/tsdldata/data/fancy.dat")
rain = scan("http://robjhyndman.com/tsdldata/hurst/precip1.dat",skip=1)
skirts = scan("http://robjhyndman.com/tsdldata/roberts/skirts.dat",skip=5)
kings
head(kings)
kingstimeseries = ts(kings)
kingstimeseries
plot.ts(kingstimeseries)
plot.ts(kingstimeseries)
births
head(births)
birthstimeseries = ts(births, frequency=12, start=c(1946,1))
birthstimeseries
plot.ts(birthstimeseries)
plot.ts(birthstimeseries)
birthdecomp = decompose(birthstimeseries)
plot(birthdecomp)
plot(birthdecomp)
souvenir
souvenirtimeseries = ts(souvenir, frequency=12, start=c(1987,1))
souvenirtimeseries
plot.ts(souvenirtimeseries)
plot.ts(souvenirtimeseries)
logsovseries = log(souvenirtimeseries)
logsovseries = log(souvenirtimeseries)
plot.ts(logsovseries)
plot.ts(logsovseries)
logsouvenirtimeseries = log(souvenirtimeseries)
plot.ts(logsouvenirtimeseries)
plot.ts(logsouvenirtimeseries)
plot.ts(kingstimeseries)
library("TTR")
library("forecast")
kingstimeseriesSMA3 = SMA(kingstimeseries,n=3)
kingstimeseriesSMA3
plot.ts(kingstimeseriesSMA3)
plot.ts(kingstimeseriesSMA3)
plot.ts(kingstimeseries)
kingstimeseries
kingstimeseriesSMA5 = SMA(kingstimeseries,n=5)
plot.ts(kingstimeseriesSMA5)
plot.ts(kingstimeseriesSMA5)
kingsholtwinters = HoltWinters(kingstimeseries, gamma=F)
plot.ts(kingsholtwinters)
plot.ts(kingsholtwinters)
kingsholtwinters
plot.ts(birthstimeseries)
plot.ts(birthstimeseries)
birthstimeseriescomponents = decompose(birthstimeseries)
birthdecom = decompose(birthstimeseries)
plot(birthdecom)
plot(birthdecom)
birthdecom
birthdecom
birthstimeseriescomponents$seasonal
birthstimeseriescomponents$trend
birthstimeseriescomponents = decompose(birthstimeseries)
birthstimeseriesseasonallyadjusted = birthstimeseries - birthstimeseriescomponents$seasonal
plot(birthstimeseriesseasonallyadjusted) ## seasionality adjusted
skirtsseries = ts(skirts)
skirtsseries = ts(skirts)
plot(skirtsseries)
plot(skirtsseries)
skirtsdiff1 = diff(skirtsseries, 1) ## 1 for first order differences
skirtsdiff1 = diff(skirtsseries, 1) ## 1 for first order differences
plot(skirtsdiff1)
plot(skirtsdiff1)
skirtsdiff2 = diff(skirtsseries, 2)
plot(skirtsdiff2)
plot(skirtsdiff2)
pacf(souvenirtimeseries)
acf(souvenirtimeseries)
acf(souvenirtimeseries)
